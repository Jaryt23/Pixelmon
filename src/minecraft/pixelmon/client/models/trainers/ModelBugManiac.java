// Date: 2/17/2013 7:27:06 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX




package pixelmon.client.models.trainers;

import pixelmon.entities.pixelmon.*;
import net.minecraft.client.model.*;
import net.minecraft.entity.*;
import net.minecraft.util.*;

public class ModelBugManiac extends ModelBase
{
  //fields
    ModelRenderer head;
    ModelRenderer Hat;
    ModelRenderer Top_Hat_Base;
    ModelRenderer Top_Hat;
    ModelRenderer Pole_;
    ModelRenderer Net;
    ModelRenderer Net_holder_Front;
    ModelRenderer Net_holder_Back;
    ModelRenderer Net_Holder_L;
    ModelRenderer Net_Holder_R;
    ModelRenderer Pole_2;
    ModelRenderer Net_2;
    ModelRenderer Net_holder_Front_2;
    ModelRenderer Net_holder_Back_2;
    ModelRenderer Net_Holder_L_2;
    ModelRenderer Net_Holder_R_2;
    ModelRenderer body;
    ModelRenderer rightarm;
    ModelRenderer leftarm;
    ModelRenderer rightleg;
    ModelRenderer leftleg;
    ModelRenderer Body;
    ModelRenderer Head;
  
  public ModelBugManiac()
  {
    textureWidth = 128;
    textureHeight = 64;
    
      Body = new ModelRenderer(this, "Body");
      Body.setRotationPoint(0,0,0);
      Head = new ModelRenderer(this, "Head");
      Head.setRotationPoint(-0.5F,0,0);
      head = new ModelRenderer(this, 0, 0);
      head.addBox(-2.5F, -5F, -3F, 5, 5, 5);
      head.setTextureSize(128, 64);
      head.mirror = true;
      setRotation(head, 0F, 0F, 0F);
      Head.addChild(head);
      Hat = new ModelRenderer(this, 33, 8);
      Hat.addBox(-4F, -3F, -4F, 7, 0, 7);
      Hat.setRotationPoint(0.5F, -2F, 0F);
      Hat.setTextureSize(128, 64);
      Hat.mirror = true;
      setRotation(Hat, 0F, 0F, 0F);
      Head.addChild(Hat);
      Top_Hat_Base = new ModelRenderer(this, 44, 25);
      Top_Hat_Base.addBox(-2F, -3F, -2F, 5, 2, 5);
      Top_Hat_Base.setRotationPoint(-0.5F, -4F, -1F);
      Top_Hat_Base.setTextureSize(128, 64);
      Top_Hat_Base.mirror = true;
      setRotation(Top_Hat_Base, 0F, 0F, 0F);
      Head.addChild(Top_Hat_Base);
      Top_Hat = new ModelRenderer(this, 52, 18);
      Top_Hat.addBox(-2F, -3F, -2F, 3, 1, 3);
      Top_Hat.setRotationPoint(0.5F, -5F, 0F);
      Top_Hat.setTextureSize(128, 64);
      Top_Hat.mirror = true;
      setRotation(Top_Hat, 0F, 0F, 0F);
      Head.addChild(Top_Hat);
      Body.addChild(Head);
      Pole_ = new ModelRenderer(this, 0, 12);
      Pole_.addBox(-10F, -2F, 0F, 18, 1, 1);
      Pole_.setRotationPoint(1F, 7F, 1F);
      Pole_.setTextureSize(128, 64);
      Pole_.mirror = true;
      setRotation(Pole_, 0.1487144F, 0.0279803F, -0.8179294F);
      Net = new ModelRenderer(this, 44, 0);
      Net.addBox(0F, -2F, 0F, 5, 3, 5);
      Net.setRotationPoint(6F, 2F, -1F);
      Net.setTextureSize(128, 64);
      Net.mirror = true;
      setRotation(Net, 0F, 0F, 0F);
      Net_holder_Front = new ModelRenderer(this, 0, 12);
      Net_holder_Front.addBox(-3F, -2F, 0F, 7, 1, 1);
      Net_holder_Front.setRotationPoint(6F, 1F, 1F);
      Net_holder_Front.setTextureSize(128, 64);
      Net_holder_Front.mirror = true;
      setRotation(Net_holder_Front, 0F, -1.524323F, 0F);
      Net_holder_Back = new ModelRenderer(this, 0, 12);
      Net_holder_Back.addBox(0F, -2F, 0F, 7, 1, 1);
      Net_holder_Back.setRotationPoint(11F, 1F, -2F);
      Net_holder_Back.setTextureSize(128, 64);
      Net_holder_Back.mirror = true;
      setRotation(Net_holder_Back, 0F, -1.524323F, 0F);
      Net_Holder_L = new ModelRenderer(this, 0, 12);
      Net_Holder_L.addBox(0F, -2F, 0F, 5, 1, 1);
      Net_Holder_L.setRotationPoint(5F, 1F, -2F);
      Net_Holder_L.setTextureSize(128, 64);
      Net_Holder_L.mirror = true;
      setRotation(Net_Holder_L, 0F, 0F, 0F);
      Net_Holder_R = new ModelRenderer(this, 0, 12);
      Net_Holder_R.addBox(0F, -2F, 0F, 5, 1, 1);
      Net_Holder_R.setRotationPoint(6F, 1F, 4F);
      Net_Holder_R.setTextureSize(128, 64);
      Net_Holder_R.mirror = true;
      setRotation(Net_Holder_R, 0F, 0F, 0F);
      Pole_2 = new ModelRenderer(this, 0, 12);
      Pole_2.addBox(-8F, 0F, 0F, 18, 1, 1);
      Pole_2.setRotationPoint(-1F, 5F, 2F);
      Pole_2.setTextureSize(128, 64);
      Pole_2.mirror = true;
      setRotation(Pole_2, 0F, 0F, 0.9294653F);
      Net_2 = new ModelRenderer(this, 44, 0);
      Net_2.addBox(0F, -1F, 0F, 5, 3, 5);
      Net_2.setRotationPoint(-12F, 0F, 0F);
      Net_2.setTextureSize(128, 64);
      Net_2.mirror = true;
      setRotation(Net_2, 0F, 0F, 0F);
      Net_holder_Front_2 = new ModelRenderer(this, 0, 12);
      Net_holder_Front_2.addBox(-4F, 0F, 0F, 7, 1, 1);
      Net_holder_Front_2.setRotationPoint(-6F, -2F, 3F);
      Net_holder_Front_2.setTextureSize(128, 64);
      Net_holder_Front_2.mirror = true;
      setRotation(Net_holder_Front_2, 0F, -1.59868F, 0F);
      Net_holder_Back_2 = new ModelRenderer(this, 0, 12);
      Net_holder_Back_2.addBox(0F, 0F, 0F, 7, 1, 1);
      Net_holder_Back_2.setRotationPoint(-12F, -2F, -1F);
      Net_holder_Back_2.setTextureSize(128, 64);
      Net_holder_Back_2.mirror = true;
      setRotation(Net_holder_Back_2, 0F, -1.524323F, 0F);
      Net_Holder_L_2 = new ModelRenderer(this, 0, 12);
      Net_Holder_L_2.addBox(0F, 0F, 0F, 6, 1, 1);
      Net_Holder_L_2.setRotationPoint(-12F, -2F, -1F);
      Net_Holder_L_2.setTextureSize(128, 64);
      Net_Holder_L_2.mirror = true;
      setRotation(Net_Holder_L_2, 0F, 0F, 0F);
      Net_Holder_R_2 = new ModelRenderer(this, 0, 12);
      Net_Holder_R_2.addBox(0F, 0F, 0F, 6, 1, 1);
      Net_Holder_R_2.setRotationPoint(-12F, -2F, 5F);
      Net_Holder_R_2.setTextureSize(128, 64);
      Net_Holder_R_2.mirror = true;
      setRotation(Net_Holder_R_2, 0F, 0F, 0F);
      body = new ModelRenderer(this, 16, 16);
      body.addBox(-4F, -3F, -2F, 7, 12, 3);
      body.setRotationPoint(0F, 3F, 0F);
      body.setTextureSize(128, 64);
      body.mirror = true;
      setRotation(body, 0F, 0F, 0F);
      rightarm = new ModelRenderer(this, 40, 16);
      rightarm.addBox(-2F, -5F, -1F, 2, 11, 2);
      rightarm.setRotationPoint(-4F, 5F, -0.5F);
      rightarm.setTextureSize(128, 64);
      rightarm.mirror = true;
      setRotation(rightarm, 0F, 0F, 0.074351F);
      leftarm = new ModelRenderer(this, 40, 16);
      leftarm.addBox(0F, -5F, -1F, 2, 11, 2);
      leftarm.setRotationPoint(3F, 5F, -1F);
      leftarm.setTextureSize(128, 64);
      leftarm.mirror = true;
      setRotation(leftarm, 0F, 0F, -0.0743572F);
      rightleg = new ModelRenderer(this, 0, 16);
      rightleg.addBox(-1.5F, 0F, -1.5F, 3, 12, 3);
      rightleg.setRotationPoint(-2.5F, 12F, -0.5F);
      rightleg.setTextureSize(128, 64);
      rightleg.mirror = true;
      setRotation(rightleg, 0F, 0F, 0F);
      leftleg = new ModelRenderer(this, 0, 16);
      leftleg.addBox(-1.5F, 0F, -1.5F, 3, 12, 3);
      leftleg.setRotationPoint(1.5F, 12F, -0.5F);
      leftleg.setTextureSize(128, 64);
      leftleg.mirror = true;
      setRotation(leftleg, 0F, 0F, 0F);;
      
      Body.addChild(Pole_);
      Body.addChild(Net);
      Body.addChild(Net_holder_Front);
      Body.addChild(Net_holder_Back);
      Body.addChild(Net_Holder_L);
      Body.addChild(Net_Holder_R);
      Body.addChild(Pole_2);
      Body.addChild(Net_2);
      Body.addChild(Net_holder_Front_2);
      Body.addChild(Net_holder_Back_2);
      Body.addChild(Net_Holder_L_2);
      Body.addChild(Net_Holder_R_2);
      Body.addChild(body);
      Body.addChild(rightarm);
      Body.addChild(leftarm);
      Body.addChild(rightleg);
      Body.addChild(leftleg);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5);
    head.render(f5);
    Hat.render(f5);
    Top_Hat_Base.render(f5);
    Top_Hat.render(f5);
    Pole_.render(f5);
    Net.render(f5);
    Net_holder_Front.render(f5);
    Net_holder_Back.render(f5);
    Net_Holder_L.render(f5);
    Net_Holder_R.render(f5);
    Pole_2.render(f5);
    Net_2.render(f5);
    Net_holder_Front_2.render(f5);
    Net_holder_Back_2.render(f5);
    Net_Holder_L_2.render(f5);
    Net_Holder_R_2.render(f5);
    body.render(f5);
    rightarm.render(f5);
    leftarm.render(f5);
    rightleg.render(f5);
    leftleg.render(f5);
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
	  	Head.rotateAngleY = f3 / (180F / (float) Math.PI);
		Head.rotateAngleX = f4 / (180F / (float) Math.PI);
		rightleg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
		leftleg.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 1.4F * f1;
		rightarm.rotateAngleX = MathHelper.cos(f * 0.6662F) * .8F * f1;
		leftarm.rotateAngleX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * .8F * f1;
  }

}
